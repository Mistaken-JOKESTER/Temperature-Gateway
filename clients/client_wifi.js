// client.js
const net = require("net"); // import net
const readline = require("readline").createInterface({
        input: process.stdin,
        output: process.stdout
}); // this will be important later

const dataset = [
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]),
    Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa])
]


const options = {
    port: 8000,
    //host: '13.233.126.178'
    // if you want to connect to a different computer you can use host: "HOST"
    // replace HOST with the IP address to connect to
    // otherwise, run the server on the same computer as the client
};

let client = net.connect(options, () => {
    console.log("connected!");
});

function newProblem() {    
    let op1 = "";
  	let op2 = "";
  	readline.question("Press any number to send and q to quit", (num) => {
    	  if (num == "q") {
    	      client.end();
    	  }
          
          for (let i = 0; i < dataset.length; i++) {
                const element = dataset[i];
                console.log(element)
                client.write(Buffer.from(element))
            }
        //client.write(Buffer.from([0x54, 0x5a, 0x0, 0x28, 0x24, 0x24, 0x4, 0x6, 0x2, 0x13, 0x0, 0x0, 0x6, 0x52, 0x8, 0x49, 0x7, 0x90, 0x0, 0x20, 0x15, 0x9, 0x11, 0x8, 0x1d, 0x25, 0x0, 0x0, 0x0, 0x8, 0x60, 0xc0, 0x0, 0x0, 0x1, 0x9e, 0x4, 0xb7, 0x0, 0x0, 0x0, 0x1, 0x25, 0xb0, 0xd, 0xa]))
        client.end()
  	});
}

client.on("data", data => {
    console.log(data.toString()); // print out data
    newProblem(); // ask for more input
});

client.on("end", () => { // close everything when done
    console.log("disconnected");
    readline.close();
})

console.log("enter q to quit");
newProblem()